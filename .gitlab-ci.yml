stages:
  - analysis
  - compile
  - build
  - deploy

variables:
  # Docker image building for GCR
  VERSIONED_IMAGE: ${GCP_PROJECT_ID}/${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}
  VERSIONED_IMAGE_TAG: ${GCP_PROJECT_ID}/${CI_PROJECT_PATH}:${CI_COMMIT_TAG}
  # Kubernetes deployment
  DEPLOYED_IMAGE: ${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}
  DEPLOYED_IMAGE_TAG: ${CI_PROJECT_NAME}:${CI_COMMIT_TAG}
  DEV_IMAGE: ${CI_PROJECT_NAME}:dev
  STAG_IMAGE: ${CI_PROJECT_NAME}:stag
  PROD_IMAGE: ${CI_PROJECT_NAME}:prod
  # Sonarqube
  SONAR_SOURCES: "."
  GIT_SSL_NO_VERIFY: "true"

sonarqube_scan:
  stage: analysis
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - >
      sonar-scanner
      -Dsonar.projectKey=$CI_PROJECT_PATH
      -Dsonar.sources=$SONAR_SOURCES
      -Dsonar.scm.provider=git
      -Dsonar.exclusions='vendor/**'
      -Dsonar.qualitygate.wait=true
  only:
    - develop
  tags:
    - untag

# ############### COMPILE ################
# [MANDATORY]
# Build nestjs distribution DEV.
compile_dev:
  stage: compile
  image: node:latest
  script:
    - npm install glob rimraf
    - npm install
    - npm run build
  cache:
    key: ${CI_PROJECT_PATH_SLUG}-dev
    paths:
      - node_modules/
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - Dockerfile
      - deploy/
      - dist/
    expire_in: 1 hrs
  tags:
    - compile
  only:
    - /^(\d+\.)(\d+\.)(\d+\-b\d+)$/ # match X.Y.Z-bN tag format, ex: 0.1.0-b0
    
# ############### COMPILE ################
# [MANDATORY]
# Build nestjs distribution DEV.
compile_stag:
  stage: compile
  image: node:latest
  script:
    - npm install glob rimraf
    - npm install
    - npm run build
  # - /^(\d+\.)(\d+\.)(\d+\-b\d+)$/ # match X.Y.Z-bN tag format, ex: 0.1.0-b0
  cache:
    key: ${CI_PROJECT_PATH_SLUG}-stag
    paths:
      - node_modules/
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - Dockerfile
      - deploy/
      - dist/
    expire_in: 1 hrs
  tags:
    - compile
  only:
    - /^(\d+\.)(\d+\.)(\d+\-(alpha|beta|rc)\d+)$/ # match X.Y.Z-alpha/beta/rcN tag format, ex: 0.1.0-alpha0
    
# ############### COMPILE ################
# [MANDATORY]
# Build nestjs distribution DEV.
compile_prod:
  stage: compile
  image: node:latest
  script:
    - npm install glob rimraf
    - npm install
    - npm run build
  # - /^(\d+\.)(\d+\.)(\d+\-b\d+)$/ # match X.Y.Z-bN tag format, ex: 0.1.0-b0
  cache:
    key: ${CI_PROJECT_PATH_SLUG}-prod
    paths:
      - node_modules/
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - Dockerfile
      - deploy/
      - dist/
    expire_in: 1 hrs
  tags:
    - compile
  only:
    - /^(\d+\.)(\d+\.)(\d+)$/ # match X.Y.Z tag format, ex: 1.0.0


build_development:
  stage: build
  image: gcr.io/kaniko-project/executor:debug
  script:
    - mkdir -p "${GOOGLE_APPLICATION_CREDENTIALS%/*}"
    - echo $KANIKO_SECRET | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $VERSIONED_IMAGE
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - deploy/
    expire_in: 60 sec
  only:
    - /^(\d+\.)(\d+\.)(\d+\-b\d+)$/ # match X.Y.Z-bN tag format, ex: 0.1.0-b0
  tags:
    - build

deploy_development:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image: asia.gcr.io/uii-cloud-project/interoperability/os/alpine:3.11-kubectl.1
  script:
    - echo $KUBE_CONFIG | base64 -d > /.kube/config
    - kubectl config use-context dev
    - sed -ri s/${DEV_IMAGE}/${DEPLOYED_IMAGE}/ deploy/dev-deployment.yaml
    - kubectl apply -f deploy/dev-deployment.yaml
  dependencies:
    - build_development
  only:
    - /^(\d+\.)(\d+\.)(\d+\-b\d+)$/ # match X.Y.Z-bN tag format, ex: 0.1.0-b0
  tags:
    - deploy

build_staging:
  stage: build
  image: gcr.io/kaniko-project/executor:debug
  script:
    - mkdir -p "${GOOGLE_APPLICATION_CREDENTIALS%/*}"
    - echo $KANIKO_SECRET | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $VERSIONED_IMAGE
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - deploy/
    expire_in: 60 sec
  only:
    - /^(\d+\.)(\d+\.)(\d+\-(alpha|beta|rc)\d+)$/ # match X.Y.Z-alpha/beta/rcN tag format, ex: 0.1.0-alpha0
  tags:
    - build

deploy_staging:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image: asia.gcr.io/uii-cloud-project/interoperability/os/alpine:3.11-kubectl.1
  script:
    - echo $KUBE_CONFIG | base64 -d > /.kube/config
    - kubectl config use-context staging
    - sed -ri s/${STAG_IMAGE}/${DEPLOYED_IMAGE}/ deploy/stag-deployment.yaml
    - kubectl apply -f deploy/stag-deployment.yaml
  dependencies:
    - build_staging
  only:
    - /^(\d+\.)(\d+\.)(\d+\-(alpha|beta|rc)\d+)$/ # match X.Y.Z-alpha/beta/rcN tag format, ex: 0.1.0-alpha0
  tags:
    - deploy

build_production:
  stage: build
  image: gcr.io/kaniko-project/executor:debug
  script:
    - mkdir -p "${GOOGLE_APPLICATION_CREDENTIALS%/*}"
    - echo $KANIKO_SECRET | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $VERSIONED_IMAGE
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - deploy/
    expire_in: 60 sec
  only:
    - /^(\d+\.)(\d+\.)(\d+)$/ # match X.Y.Z tag format, ex: 1.0.0
  tags:
    - build

deploy_production:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image: asia.gcr.io/uii-cloud-project/interoperability/os/alpine:3.11-kubectl.1
  script:
    - echo $KUBE_CONFIG | base64 -d > /.kube/config
    - kubectl config use-context production
    - sed -ri s/${PROD_IMAGE}/${DEPLOYED_IMAGE}/ deploy/prod-deployment.yaml
    - kubectl apply -f deploy/prod-deployment.yaml
  dependencies:
    - build_production
  only:
    - /^(\d+\.)(\d+\.)(\d+)$/ # match X.Y.Z tag format, ex: 1.0.0
  tags:
    - deploy
